import extended_euclid as eu
import quick_exp as qe
from decimal import Decimal

# values given by the excercise
n = 1200867589138402836833011627922648843865398758356119243237528992192661195883356632897345588719304934438534205354787918897834861577085344762327143956220911721261528444200091612203799709834594997775067917847690315178675148605331912292785817786238119642200812571328900475396454557843711810878201457471117182510681991129539167165552073440243913144926216242708247975357913354302233984628116835035339887667027876020733894592318754941490852771134623356130705203596572659
e1 = 7
e2 = 11
pubkey1 = (e1, n)
pubkey2 = (e2, n)
c1 = 13740701343175031613859506260680271
c2 = 442020648620790478265510268903148188611479520134128911

# computation part
mcd, x, y = eu.EuclidGCD(e1, e2)

print("x:", x)
print("y:", y)

# since x is negative, we use the following formula:
# c1 ^ x = (c1 ^ -1) ^ x
# due to this formula, we need to find the multiplicative inverse of c1
invc1 = eu.EuclidGCD(e1, n)[1]

# finally the two part that compose m are:
m1 = qe.exp(invc1, -x, n, False)
m2 = qe.exp(c2, y, n, False)
m = (m1 * m2) % n
print("m:", m)
